{"version":3,"file":"static/js/736.d67308d3.chunk.js","mappings":"oRAEaA,EAAWC,EAAAA,GAAAA,GAAH,uRAmBRC,GANWD,EAAAA,GAAAA,GAAH,8BAMIA,EAAAA,GAAAA,IAAH,oNASTE,EAAQF,EAAAA,GAAAA,EAAH,qJAQLG,EAAYH,EAAAA,GAAAA,EAAH,+JAUTI,EAASJ,EAAAA,GAAAA,EAAH,gF,SCiBnB,EA5Da,WACX,OAAkCK,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBN,GAAW,GADK,mBAGSO,EAAAA,EAAAA,IAAaJ,GAHtB,OAGRK,EAHQ,OAIdV,EAAaU,GAJC,gDAMdN,EAASD,GANK,yBAQdD,GAAW,GARG,4EAAH,qDAWfM,GACD,GAAE,CAACL,EAAOE,KAGT,+BACE,+BACGJ,IAAW,wCACU,IAArBF,EAAUY,QACT,SAACnB,EAAD,UACGO,EAAUa,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACxC,OACE,2BAGf,SAACtB,EAAD,CACmBuB,IACEF,EAAY,6CAC8BA,GACtC,6EAENG,IAAKJ,KAKP,SAACnB,EAAD,UAAQmB,KACR,UAAClB,EAAD,0BACa,0BAAOoB,SAhBbH,EAoBZ,OAGH,SAAChB,EAAD,6EAKT,C,+LC7DKsB,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAIlB,IAAMC,EAAiB,mCAAG,oGACRD,EAAAA,EAAAA,IAAA,qCAAwCD,IADhC,cACzBT,EADyB,yBAExBA,EAASY,MAFe,2CAAH,qDAOjBC,EAAiB,mCAAG,WAAOC,EAAOC,GAAd,uFACRL,EAAAA,EAAAA,IAAA,+BACGD,EADH,kBACoBK,EADpB,kBACmCC,EADnC,yBADQ,cACzBf,EADyB,yBAIxBA,EAASY,MAJe,2CAAH,wDAQjBI,EAAe,mCAAG,WAAMb,GAAN,uFACNO,EAAAA,EAAAA,IAAA,gBACZP,EADY,oBACEM,EADF,oBADM,cACvBT,EADuB,yBAItBA,EAASY,MAJa,2CAAH,sDAQfb,EAAY,mCAAG,WAAMI,GAAN,uFACHO,EAAAA,EAAAA,IAAA,gBACZP,EADY,4BACUM,EADV,oBADG,cACpBT,EADoB,yBAInBA,EAASY,KAAKK,MAJK,2CAAH,sDASZC,EAAU,mCAAG,WAAMf,GAAN,uFACDO,EAAAA,EAAAA,IAAA,gBACZP,EADY,4BACUM,EADV,oBADC,cAClBT,EADkB,yBAIjBA,EAASY,KAAKO,SAJG,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","fetch-services/Fetch-servises.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 2fr));\n  grid-gap: 40px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nexport const CastItem = styled.li`\n    \n`\n\n\n\nexport const CastImage = styled.img`\n  width: 100%;\n  height: 400px;\n  margin-bottom: 10px;\n  box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;\n   border-radius: 4px;\n  object-fit: cover;\n`;\n\nexport const Actor = styled.p`\n  color: white;\n  text-shadow: 3px 4px 7px rgba(7, 34, 38, 0.8);\n  font-weight: 500;\n  font-size: 25px;\n  padding: 0px;\n`;\n\nexport const Character = styled.p`\n color: lightskyblue;\n  font-weight: 500;\n  font-size: 20px;\n  text-shadow: 3px 4px 7px rgba(7, 34, 38, 0.8);\n \n  padding: 10px;\n`;\n\n\nexport const NoCast = styled.p`\ncolor: white;\n  font-weight: 500;\n  font-size: 20px;\n`","import { getMovieCast } from 'fetch-services/Fetch-servises';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList, CastImage, Actor, Character, NoCast} from './Cast.styled';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const responce = await getMovieCast(movieId);\n        setMovieCast(responce);\n      } catch {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [error, movieId]);\n\n  return (\n    <>\n      <section>\n        {loading && <div>Loading...</div>}\n        {movieCast.length !== 0 ? (\n          <CastList>\n            {movieCast.map(({ id, name, profile_path, character }) => {\n              return (\n                <li key={id}>\n\n                 \n <CastImage\n                    src={\n                      profile_path\n                        ? `https://image.tmdb.org/t/p/original${profile_path}`\n                        : 'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg'\n                    }\n                    alt={name}\n                    \n                  />\n                 \n                 \n                  <Actor>{name}</Actor>\n                  <Character>\n                    Character: <span>{character}</span>\n                  </Character>\n                </li>\n              );\n            })}\n          </CastList>\n        ) : (\n          <NoCast>We don't have any information about the cast of this movie</NoCast>\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'eb6a45a4ae6328e079a1ce9a0d7e00e8';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n\n\nexport const getTrendingMovies = async () => {\n  const responce = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return responce.data;\n};\n\n\n\nexport const getMoviesBySearch = async (query, page) => {\n  const responce = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}'&page=${page}&include_adult=false`\n  );\n  return responce.data;\n};\n\n\nexport const getMovieDetails = async id => {\n  const responce = await axios.get(\n    `movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return responce.data;\n};\n\n\nexport const getMovieCast = async id => {\n  const responce = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return responce.data.cast;\n};\n\n\n\nexport const getReviews = async id => {\n  const responce = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return responce.data.results;\n};\n"],"names":["CastList","styled","CastImage","Actor","Character","NoCast","useState","movieCast","setMovieCast","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchData","getMovieCast","responce","length","map","id","name","profile_path","character","src","alt","API_KEY","axios","getTrendingMovies","data","getMoviesBySearch","query","page","getMovieDetails","cast","getReviews","results"],"sourceRoot":""}